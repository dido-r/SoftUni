using System;
using System.Linq;
using System.Collections.Generic;

namespace Survivor
{
    public class StartUp
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            string[][] matrix = new string[n][];
            int myTokens = 0;
            int opponentTokens = 0;

            for (int i = 0; i < n; i++)
            {
                string[] rowInput = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries);
                matrix[i] = new string[rowInput.Length];

                for (int j = 0; j < rowInput.Length; j++)
                {
                    matrix[i][j] = rowInput[j];
                }
            }

            string input = Console.ReadLine();

            while (input != "Gong")
            {
                string[] command = input.Split(" ", StringSplitOptions.RemoveEmptyEntries);
                int row = int.Parse(command[1]);
                int col = int.Parse(command[2]);

                if (command[0] == "Find")
                {
                    if (InRange(matrix, row, col))
                    {
                        MyMoves(ref matrix, command, ref myTokens);
                    }
                }
                else if (command[0] == "Opponent")
                {
                    if (InRange(matrix, row, col))
                    {
                        OpponentMoves(ref matrix, row, col, ref opponentTokens);

                        for (int i = 1; i <= 3; i++)
                        {
                            if (command[3] == "up")
                            {
                                if (InRange(matrix, row - i, col))
                                {
                                    OpponentMoves(ref matrix, row - i, col, ref opponentTokens);
                                }
                            }
                            else if (command[3] == "down")
                            {
                                if (InRange(matrix, row + i, col))
                                {
                                    OpponentMoves(ref matrix, row + i, col, ref opponentTokens);
                                }
                            }
                            else if (command[3] == "left")
                            {
                                if (InRange(matrix, row, col - i))
                                {
                                    OpponentMoves(ref matrix, row, col - i, ref opponentTokens);
                                }
                            }
                            else if (command[3] == "right")
                            {
                                if (InRange(matrix, row, col + i))
                                {
                                    OpponentMoves(ref matrix, row, col + i, ref opponentTokens);
                                }
                            }
                        }
                    }
                }
                input = Console.ReadLine();
            }
            Print(matrix);
            Console.WriteLine($"Collected tokens: {myTokens}");
            Console.WriteLine($"Opponent's tokens: {opponentTokens}");
        }

        static void MyMoves(ref string[][] matrix, string[] command, ref int myTokens)
        {
            int row = int.Parse(command[1]);
            int col = int.Parse(command[2]);

            if (InRange(matrix, row, col))
            {
                if (matrix[row][col] == "T")
                {
                    matrix[row][col] = "-";
                    myTokens++;
                }
            }
        }
        static void OpponentMoves(ref string[][] matrix, int row, int col, ref int opponentTokens)
        {
            if (InRange(matrix, row, col))
            {
                if (matrix[row][col] == "T")
                {
                    matrix[row][col] = "-";
                    opponentTokens++;
                }
            }
        }
        static bool InRange(string[][] matrix, int row, int col)
        {
            return row >= 0 && row < matrix.GetLength(0) && col >= 0 && col < matrix[row].Length;
        }

        static void Print(string[][] matrix)
        {
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix[i].Length; j++)
                {
                    Console.Write(matrix[i][j] + " ");
                }
                Console.WriteLine();
            }
        }
    }
}
