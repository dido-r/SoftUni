using System;
using System.Linq;
using System.Collections.Generic;

namespace MatrixShuffling
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] size = Console.ReadLine().Split().Select(int.Parse).ToArray();
            int rows = size[0];
            int cols = size[1];
            string[,] matrix = new string[rows, cols];

            for (int i = 0; i < rows; i++)
            {
                string[] rowInput = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries);

                for (int j = 0; j < cols; j++)
                {
                    matrix[i, j] = rowInput[j];
                }
            }

            string input = Console.ReadLine();

            while (input != "END")
            {
                string[] command = input.Split();

                if (command[0] == "swap" && command.Length == 5 && int.Parse(command[1]) >= 0 && int.Parse(command[2]) >= 0 && int.Parse(command[3]) >= 0 && int.Parse(command[4]) >= 0 && int.Parse(command[1]) < rows && int.Parse(command[3]) < rows && int.Parse(command[2]) < cols && int.Parse(command[4]) < cols)
                {
                    var currentCell = matrix[int.Parse(command[1]), int.Parse(command[2])];
                    matrix[int.Parse(command[1]), int.Parse(command[2])] = matrix[int.Parse(command[3]), int.Parse(command[4])];
                    matrix[int.Parse(command[3]), int.Parse(command[4])] = currentCell;
                    PrintMatrix(matrix, rows, cols);
                }
                else
                {
                    Console.WriteLine("Invalid input!");
                }
                input = Console.ReadLine();
            }
        }

        static void PrintMatrix(string[,] matrix, int rows, int cols)
        {
            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < cols; j++)
                {
                    Console.Write(matrix[i, j] + " ");
                }
                Console.WriteLine();
            }
        }
    }
}
